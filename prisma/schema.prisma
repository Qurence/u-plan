// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  tasks         Task[]        @relation("AssignedTasks")
  comments      Comment[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  memberships Membership[]
  categories  Category[]
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Membership {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  role           Role
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, organizationId])
}

enum Role {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

model Category {
  id             String   @id @default(cuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  tasks          Task[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Task {
  id             String   @id @default(cuid())
  title          String
  description    String?
  category       Category  @relation(fields: [categoryId], references: [id])
  categoryId     String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  assignedTo     User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId   String?
  attachments    Attachment[]
  comments       Comment[]
  deadline       DateTime?
  completed      Boolean   @default(false)
  archived       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  labels         Label[]        @relation("TaskLabels")
  checklists     Checklist[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        String   @id @default(cuid())
  url       String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  isCover   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Label {
  id        String   @id @default(cuid())
  name      String
  color     String   // HEX
  tasks     Task[]   @relation("TaskLabels")
  createdAt DateTime @default(now())
}

model Checklist {
  id        String   @id @default(cuid())
  title     String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  items     ChecklistItem[]
  createdAt DateTime @default(now())
}

model ChecklistItem {
  id        String   @id @default(cuid())
  text      String
  checked   Boolean @default(false)
  checklist Checklist @relation(fields: [checklistId], references: [id])
  checklistId String
  createdAt DateTime @default(now())
}
